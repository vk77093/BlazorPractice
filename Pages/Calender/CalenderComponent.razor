@page "/eventcalender"

<h3>Event Calender</h3>
<SessionComponent />
<div class="container">
    @if (displayModel)
    {
        <!--Model Box-->
        <!-- Button trigger modal -->
        @*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModalCenter">
            Launch demo modal
        </button>

         Modal 
        <div class="modal fade" data-toggle="modal" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="false">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        ...
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>*@
        <!--end of model Box-->
    <div id="modal">
        <div class="modal-dialog modal-dialog-top" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                    <button type="button" class="close" @onclick="closeModel" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="startdate">StartDate</label>
                            <input type="date" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="startdate">End Date</label>
                            <input type="date" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label for="startdate">Note</label>
                            <input type="text" class="form-control" />
                        </div>
                        <button type="submit" class="btn btn-info">Add It</button>
                        <button type="button" class="btn btn-danger" @onclick="closeModel">Cancel</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="closeModel">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
        </div>
        
        <!-- /Modal -->
    </div>
    }

    <div class="row">
        <div class="col-sm-12 col-md-12">
            <select @onchange="LoadCalender">
                @foreach (string monthName in monthNames)
                {
                    <option>@monthName</option>
                }
            </select>
            <table class="table table-bordered">
                <thead>
                    <tr>
                        @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
                        {
                            <th>@days[dayIndex]</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @for (var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
                    {
                        <tr>
                            @for (var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                            {
                                var wIndex = weekIndex;
                                var dIndex = dayIndex;
                                <td @ondblclick="@(()=>openModel(wIndex,dIndex))">
                                    @weeks[weekIndex].Dates[dayIndex].DateValue
                                    <br /><br />
                                    <label style="color:red;font-weight:bolder">@weeks[weekIndex].Dates[dayIndex].Note</label>
                                    Cell Number :[@weekIndex,@dayIndex]
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private bool displayModel = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<Week> weeks = new List<Week>();
    DateTime StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime EndDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    protected override void OnInitialized()
    {
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalenderHead();
        GenerateCalenderBody();
        base.OnInitialized();

    }
    private void LoadCalender(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        int monthIndex = DateTime.ParseExact(month, "MMMM",
            System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        StartDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        EndDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GenerateCalenderHead();
        GenerateCalenderBody();
    }
    private void GenerateCalenderHead()
    {
        var day1 = new List<string>();
        for (var dt = StartDate; dt <= EndDate; dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }
    private void GenerateCalenderBody()
    {
        weeks = new List<Week>();
        int flag = 0;
        Week week = new Week();
        List<DayEvent> dates = new List<DayEvent>();
        var totalDays = (int)(EndDate - StartDate).TotalDays;
        int countDays = 0;
        for (var dt = StartDate; dt <= EndDate; dt = dt.AddDays(1))
        {
            flag++;
            dates.Add(new DayEvent()
            {
                DateValue = dt.ToString("dd-MMMM-yyyy"),
                DayName = dt.ToString("dddd")
            });
            if (flag == 7)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);
                dates = new List<DayEvent>();
                flag = 0;
            }
            if (countDays == totalDays)
            {
                week = new Week();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countDays++;
        }
    }
    private void closeModel()
    {
        displayModel = false;
    }
    private void openModel(int wIndex,int dIndex)
    {
        displayModel = true;
    }
}
